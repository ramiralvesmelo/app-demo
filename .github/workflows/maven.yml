name: CI Java com Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      project_dir:
        description: "Diretório do projeto (ex.: app/ ou . para raiz)"
        required: false
        default: "."
      module_gav:
        description: "GAV do módulo alvo (ex.: :app-demo). Deixe vazio para build completo"
        required: false
        default: ""

permissions:
  contents: read
  packages: write   # necessário para publicar no GitHub Packages

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ JDK 17 + cache Maven (+ settings com credenciais)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          server-id: github                       # <id> usado no deploy
          server-username: GITHUB_ACTOR           # setado pelo runner
          server-password: GITHUB_TOKEN           # usa o token padrão
          settings-path: ~/.m2                    # escreve ~/.m2/settings.xml

      - name: 🏗️ Build com testes (raiz, subpasta ou módulo)
        working-directory: ${{ github.event.inputs.project_dir }}
        run: |
          set -e
          if [ -n "${{ github.event.inputs.module_gav }}" ]; then
            echo ">> Build do módulo ${{ github.event.inputs.module_gav }} (com testes)"
            mvn -B -V package -am -pl "${{ github.event.inputs.module_gav }}"
          else
            echo ">> Build do projeto em $PWD (com testes)"
            mvn -B -V package
          fi

      - name: 📦 Listar artefatos gerados
        working-directory: ${{ github.event.inputs.project_dir }}
        run: |
          echo "== Pastas target =="
          find . -type d -name target -print || true
          echo "== JAR/WAR encontrados =="
          find . -type f \( -name "*.jar" -o -name "*.war" \) -print || true

      - name: 🧪 Upload de relatórios de teste (Surefire/FailSafe)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maven-test-reports
          # ⬇️ ANCORADO no diretório do projeto (não sobe para /)
          path: |
            ${{ github.workspace }}/${{ github.event.inputs.project_dir }}/**/target/surefire-reports/**
            ${{ github.workspace }}/${{ github.event.inputs.project_dir }}/**/target/failsafe-reports/**
          if-no-files-found: ignore

      - name: 📤 Publicar artefatos (JAR/WAR) para download
        uses: actions/upload-artifact@v4
        with:
          name: maven-targets
          # ⬇️ Também ancorado no projeto — evita varrer /boot/efi
          path: |
            ${{ github.workspace }}/${{ github.event.inputs.project_dir }}/**/target/*.jar
            ${{ github.workspace }}/${{ github.event.inputs.project_dir }}/**/target/*.war
          if-no-files-found: warn

      - name: 📊 Enviar snapshot de dependências
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
        uses: advanced-security/maven-dependency-submission-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # ✅ Deploy no GitHub Packages sem mexer no POM
      # Requer repository: https://maven.pkg.github.com/<owner>/<repo>
      - name: 🚀 Deploy no GitHub Packages
        if: github.event_name != 'pull_request'   # evita PRs/forks
        working-directory: ${{ github.event.inputs.project_dir }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Usa o <server> 'github' gerado pelo setup-java no settings.xml
          # e aponta o repositório com -DaltDeploymentRepository
          OWNER_REPO="${{ github.repository }}"    # ex: user/repo
          mvn -B -V -s ~/.m2/settings.xml \
            -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${OWNER_REPO} \
            deploy