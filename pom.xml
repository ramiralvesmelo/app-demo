<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.18</version>
        <relativePath/>
    </parent>

    <groupId>br.com.springboot.erp</groupId>
    <artifactId>app-demo</artifactId>
    <version>1.0.0</version>
    <name>app-demo</name>
	<description>
	Aplicação de demonstração de um sistema ERP simplificado, desenvolvida em 
	Spring Boot 2.7 com Hibernate (JPA), validação de dados e banco em memória H2. 
	
	Este projeto tem como objetivo servir de base para estudos e práticas de:
	- Arquitetura de aplicações Java corporativas
	- Boas práticas em design e implementação de serviços REST
	- Persistência com JPA/Hibernate e consultas em banco em memória
	- Testes unitários e de integração com JUnit e Mockito
	
	Ideal para uso em treinamentos, entrevistas técnicas e como modelo de referência
	para criação de aplicações empresariais modulares com Spring Boot.
	</description>

    <properties>
        <java.version>11</java.version>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Utilities -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.38</version>
            <scope>provided</scope>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- JUnit 4 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- JUnit 4 to JUnit 5 bridge -->
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
	    <plugins>
	        <!-- resources -->
	        <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-resources-plugin</artifactId>
	        <version>3.3.1</version>
	        </plugin>
	
	        <!-- compiler (apenas plugin e processor path; dependências intactas) -->
	        <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-compiler-plugin</artifactId>
	        <version>3.11.0</version>
	        <configuration>
	            <source>${maven.compiler.source}</source>
	            <target>${maven.compiler.target}</target>
	            <encoding>${project.build.sourceEncoding}</encoding>
	            <annotationProcessorPaths>
	            <path>
	                <groupId>org.projectlombok</groupId>
	                <artifactId>lombok</artifactId>
	                <version>1.18.38</version>
	            </path>
	            </annotationProcessorPaths>
	        </configuration>
	        </plugin>
	
	        <!-- spring-boot -->
	        <plugin>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-maven-plugin</artifactId>
	        <configuration>
	            <excludes>
	            <exclude>
	                <groupId>org.projectlombok</groupId>
	                <artifactId>lombok</artifactId>
	            </exclude>
	            </excludes>
	        </configuration>
	        </plugin>
	
	        <!-- JaCoCo: agente + relatório XML (necessário p/ Codecov/Sonar) -->
	        <plugin>
	        <groupId>org.jacoco</groupId>
	        <artifactId>jacoco-maven-plugin</artifactId>
	        <version>0.8.12</version>
	        <executions>
	            <!-- injeta o agente antes dos testes -->
	            <execution>
	            <id>prepare-agent</id>
	            <goals>
	                <goal>prepare-agent</goal>
	            </goals>
	            </execution>
	
	            <!-- gera relatórios -->
	            <execution>
	            <id>report</id>
	            <phase>verify</phase>
	            <goals>
	                <goal>report</goal>
	            </goals>
	            <configuration>
	                <excludes>
	                <!-- Classe principal do Spring Boot -->
	                <exclude>**/*Application.class</exclude>
	                <exclude>**/*OrderServiceImpl.class</exclude>
	                <!-- Classes de configuração -->
	                <exclude>**/*Config.class</exclude>
	                <exclude>**/*Configuration.class</exclude>
	                <!-- DTOs de request/response -->
	                <exclude>**/*Request.class</exclude>
	                <exclude>**/*Response.class</exclude>
	                <!-- Exceptions customizadas -->
	                <exclude>**/*Exception.class</exclude>
	                <!-- Enums (geralmente não precisam de teste unitário) -->
	                <exclude>**/*Enum.class</exclude>
	                </excludes>
	            </configuration>
	            </execution>
	        </executions>
	        </plugin>
	
	        <!-- surefire: JUnit 4/5/Vintage; preserva ${argLine} do JaCoCo -->
	        <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-surefire-plugin</artifactId>
	        <version>3.2.5</version>
	        <configuration>
	            <useModulePath>false</useModulePath>
	
	            <!-- IMPORTANTE: começa com ${argLine} para não perder o JaCoCo -->
	            <argLine>
	            ${argLine}
	            --add-opens java.base/java.lang=ALL-UNNAMED
	            --add-opens java.base/java.util=ALL-UNNAMED
	            --add-opens java.base/java.io=ALL-UNNAMED
	            --add-opens java.base/java.net=ALL-UNNAMED
	            --add-opens java.base/java.lang.reflect=ALL-UNNAMED
	            </argLine>
	
	            <redirectTestOutputToFile>true</redirectTestOutputToFile>
	            <printSummary>brief</printSummary>
	            <trimStackTrace>true</trimStackTrace>
	            <forkCount>1</forkCount>
	            <reuseForks>true</reuseForks>
	        </configuration>
	        </plugin>
			<!-- CycloneDX Maven Plugin -->
			<plugin>
			  <groupId>org.cyclonedx</groupId>
			  <artifactId>cyclonedx-maven-plugin</artifactId>
			  <version>2.9.0</version>
			  <executions>
			    <execution>
			      <phase>verify</phase>
			      <goals>
			        <goal>makeAggregateBom</goal>
			      </goals>
			    </execution>
			  </executions>
			</plugin>
	    </plugins>
	</build>
</project>
